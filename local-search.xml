<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Angular绑定属性、class、style、事件</title>
    <link href="/angular/binding/"/>
    <url>/angular/binding/</url>
    
    <content type="html"><![CDATA[<blockquote><p>这一节，我们主要讲angular的模版表达式，以及属性、class、style、事件的绑定～</p></blockquote><h2 id="插值与模板表达式"><a href="#插值与模板表达式" class="headerlink" title="插值与模板表达式"></a>插值与模板表达式</h2><p>所谓 “插值” ，就是指将表达式嵌入到标记文本中。 默认情况下，插值会用双花括号 <code>&#123;&#123;  &#125;&#125; </code>作为分隔符。（跟vue一致）</p><p>可以有如下几种情况：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">//src/app/app.component.ts</span><br>...<br><span class="hljs-keyword">export</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AppComponent</span> </span>&#123;<br>  title = <span class="hljs-string">&#x27;Tour of Heroes&#x27;</span>;<br>  myHero = <span class="hljs-string">&#x27;Windstorm&#x27;</span>;<br>  itemImageUrl = <span class="hljs-string">&#x27;./image/1.png&#x27;</span>;<br>  getVal(): <span class="hljs-built_in">number</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">10</span>;<br>  &#125;<br>&#125;<br><span class="hljs-comment">//src/app/app.component.html</span><br>...<br>&lt;!-- 直接使用 --&gt;<br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>&#123;&#123;title&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>My favorite hero is: &#123;&#123;myHero&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br>&lt;!-- 调用方法 --&gt;<br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>Value: &#123;&#123; getVal() &#125;&#125;/div&gt;</span><br>&lt;!-- 用作运算--&gt;<br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>The sum of 1 + 1 is &#123;&#123;1 + 1&#125;&#125;.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br>&lt;!-- 结合使用 --&gt;<br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>&#123;&#123;price * 0.7 + getVal()&#125;&#125;.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br>&lt;!-- 绑定属性--&gt;<br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;&#123;&#123;itemImageUrl&#125;&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p><em><strong>当使用模板表达式时，请遵循下列指南：</strong></em></p><ul><li>最好是简单的运算，以便代码能够迅速执行；</li><li>不能使用那些具有或可能引发副作用的 JavaScript 表达式：<ul><li>赋值（=, +=, -=, …)）</li><li>new、typeof、instanceof 等运算符</li><li>自增和自减运算符：++ 和 –</li><li>不支持位运算，比如 | 和 &amp;</li></ul></li></ul><h2 id="属性绑定"><a href="#属性绑定" class="headerlink" title="属性绑定"></a>属性绑定</h2><p>属性绑定形式大概有三种方式：</p><ul><li>使用[]: [property]=”变量”</li><li>使用bind-: bind-src=”变量”</li><li>插值表达式：src=”“</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">// src/app/app.component.ts </span><br>... <br><span class="hljs-keyword">export</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AppComponent</span> </span>&#123; <br>  picUrl = <span class="hljs-string">&#x27;./image/1.png&#x27;</span>; <br>  picAlt = <span class="hljs-string">&#x27;pic goode&#x27;</span>;<br>  pic = &#123;<br>    <span class="hljs-attr">url</span>: <span class="hljs-string">&#x27;./image/1.png&#x27;</span>,<br>    <span class="hljs-attr">alt</span>: <span class="hljs-string">&#x27;pic goode&#x27;</span><br>  &#125;;<br>  isUnchanged: <span class="hljs-literal">true</span>;<br>  customTitle: <span class="hljs-string">&#x27;custom title&#x27;</span>;<br>&#125;<br><br><span class="hljs-comment">// src/app/app.component.html</span><br>...<br><span class="hljs-comment">// 使用 []</span><br>&lt;img [src]=<span class="hljs-string">&quot;picUrl&quot;</span> [alt]=<span class="hljs-string">&quot;picAlt&quot;</span> /&gt;<br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> [<span class="hljs-attr">disabled</span>]=<span class="hljs-string">&quot;isUnchanged&quot;</span>&gt;</span>Disabled Button<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="hljs-comment">/****************** 特别提示 start *********************/</span><br><span class="hljs-comment">// 这样会报错</span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">colspan</span>=<span class="hljs-string">&quot;&#123;&#123;1 + 1&#125;&#125;&quot;</span>&gt;</span>Three-Four<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span></span> <br><span class="hljs-comment">// 正确写法</span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">td</span> [<span class="hljs-attr">colSpan</span>]=<span class="hljs-string">&quot;1 + 1&quot;</span>&gt;</span>Three-Four<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span></span><br><span class="hljs-comment">/****************** 特别提示 end **********************/</span><br><span class="hljs-comment">// 使用bind</span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">bind-src</span>=<span class="hljs-string">&quot;picUrl&quot;</span> <span class="hljs-attr">bind-alt</span>=<span class="hljs-string">&quot;picAlt&quot;</span> /&gt;</span></span><br><span class="hljs-comment">// 插值</span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;&#123;&#123; pic.url &#125;&#125;&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&#123;&#123; pic.alt &#125;&#125;&quot;</span> /&gt;</span></span><br><span class="hljs-comment">// 绑定自定义属性</span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">span</span> [<span class="hljs-attr">attr.data-title</span>]=<span class="hljs-string">&quot;customTitle&quot;</span>&gt;</span>some words<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">span</span> [<span class="hljs-attr">attr.title</span>]=<span class="hljs-string">&quot;customTitle&quot;</span>&gt;</span>title<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p><em>虽然上面三种方式都可以绑定，但是建议在项目中采取其中一种形式，保持代码的统一性也很重要哦～</em></p><h2 id="class绑定"><a href="#class绑定" class="headerlink" title="class绑定"></a>class绑定</h2><h3 id="绑定单个class"><a href="#绑定单个class" class="headerlink" title="绑定单个class"></a>绑定单个class</h3><p>语法：<code>[class.ClassName]=&quot;boolean | undefined | null&quot;</code></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">//src/app/app.component.ts </span><br>... <br><span class="hljs-keyword">export</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AppComponent</span> </span>&#123; <br>  theme = <span class="hljs-string">&#x27;primary&#x27;</span>;<br>  isSuccess = <span class="hljs-literal">true</span>;<br>&#125; <br><span class="hljs-comment">//src/app/app.component.html </span><br>... <br>&lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;btn&quot;</span> [<span class="hljs-keyword">class</span>.btn-primary]=<span class="hljs-string">&quot;theme === &#x27;primary&#x27;&quot;</span>&gt;Primary&lt;/div&gt;<br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn&quot;</span> [<span class="hljs-attr">class.btn-secondary</span>]=<span class="hljs-string">&quot;true&quot;</span>&gt;</span>secondary<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn&quot;</span> [<span class="hljs-attr">class.btn-success</span>]=<span class="hljs-string">&quot;isSuccess&quot;</span>&gt;</span>success<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn&quot;</span> [<span class="hljs-attr">class.btn-danger</span>]=<span class="hljs-string">&quot;&#x27;啦啦啦&#x27;&quot;</span>&gt;</span>danger<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn&quot;</span> [<span class="hljs-attr">class.btn-danger</span>]=<span class="hljs-string">&quot;0&quot;</span>&gt;</span>danger<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn&quot;</span> [<span class="hljs-attr">class.btn-danger</span>]=<span class="hljs-string">&quot;undefined&quot;</span>&gt;</span>danger<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h3 id="绑定多个class"><a href="#绑定多个class" class="headerlink" title="绑定多个class"></a>绑定多个class</h3><p>语法：<code>[class]=&quot;classExpression&quot;</code></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">// src/app/app.component.ts </span><br>... <br><span class="hljs-keyword">export</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AppComponent</span> </span>&#123; <br>  btnCls = <span class="hljs-string">&#x27;btn btn-primary&#x27;</span>; <span class="hljs-comment">// 字符串，空格分隔</span><br>  btnCls2 = [<span class="hljs-string">&#x27;btn&#x27;</span>, <span class="hljs-string">&#x27;btn-success&#x27;</span>]; <br>  btnCls3 = &#123;<br>    <span class="hljs-attr">btn</span>: <span class="hljs-literal">true</span>,<br>    <span class="hljs-string">&#x27;btn-info&#x27;</span>: <span class="hljs-literal">true</span><br>  &#125;;<br>&#125; <br><span class="hljs-comment">// src/app/app.component.html </span><br>...<br>&lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;btn&quot;</span> [<span class="hljs-class"><span class="hljs-keyword">class</span>]</span>=<span class="hljs-string">&quot;btnCls&quot;</span>&gt;btnCls&lt;/div&gt;<br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn&quot;</span> [<span class="hljs-attr">class</span>]=<span class="hljs-string">&quot;btnCls2&quot;</span>&gt;</span>btnCls2<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn&quot;</span> [<span class="hljs-attr">class</span>]=<span class="hljs-string">&quot;btnCls3&quot;</span>&gt;</span>btnCls3<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>&lt;!-- 也可以用内置指令ngClass --&gt;<br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn&quot;</span> [<span class="hljs-attr">ngClass</span>]=<span class="hljs-string">&quot;btnCls&quot;</span>&gt;</span>btnCls<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn&quot;</span> [<span class="hljs-attr">ngClass</span>]=<span class="hljs-string">&quot;btnCls2&quot;</span>&gt;</span>btnCls2<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn&quot;</span> [<span class="hljs-attr">ngClass</span>]=<span class="hljs-string">&quot;btnCls3&quot;</span>&gt;</span>btnCls3<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h2 id="属性样式"><a href="#属性样式" class="headerlink" title="属性样式"></a>属性样式</h2><h3 id="单一样式绑定"><a href="#单一样式绑定" class="headerlink" title="单一样式绑定"></a>单一样式绑定</h3><p>语法： <code>[style.width]=&quot;string | undefined | null&quot;</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html">// src/app/app.component.html <br>... <br><span class="hljs-tag">&lt;<span class="hljs-name">p</span> [<span class="hljs-attr">style.color</span>]=<span class="hljs-string">&quot;&#x27;#f60&#x27;&quot;</span>&gt;</span>some words<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span> [<span class="hljs-attr">style.height</span>]=<span class="hljs-string">&quot;&#x27;50px&#x27;&quot;</span> [<span class="hljs-attr">style.border</span>]=<span class="hljs-string">&quot;&#x27;1px solid&#x27;&quot;</span>&gt;</span>属性值中带单位px<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span> [<span class="hljs-attr">style.height.px</span>]=<span class="hljs-string">&quot;50&quot;</span> [<span class="hljs-attr">style.border</span>]=<span class="hljs-string">&quot;&#x27;1px solid&#x27;&quot;</span>&gt;</span>单位px不在属性值中<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="多重样式绑定"><a href="#多重样式绑定" class="headerlink" title="多重样式绑定"></a>多重样式绑定</h3><p>语法：<code>[style]=&quot;styleExpression&quot;</code></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">// src/app/app.component.ts </span><br>... <br><span class="hljs-keyword">export</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AppComponent</span> </span>&#123;<br>  style1 = <span class="hljs-string">&#x27;width: 200px;height: 50px;text-align: center;border: 1px solid;&#x27;</span>;<br>  style2 = &#123;<br>    <span class="hljs-attr">width</span>: <span class="hljs-string">&#x27;200px&#x27;</span>,<br>    <span class="hljs-attr">height</span>: <span class="hljs-string">&#x27;50px&#x27;</span>,<br>    <span class="hljs-string">&#x27;text-align&#x27;</span>: <span class="hljs-string">&#x27;center&#x27;</span>,<br>    <span class="hljs-attr">border</span>: <span class="hljs-string">&#x27;1px solid&#x27;</span><br>  &#125;;<br>&#125; <br><span class="hljs-comment">// src/app/app.component.html </span><br>... <br>&lt;p [style]=<span class="hljs-string">&quot;style1&quot;</span>&gt;style1&lt;/p&gt;<br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span> [<span class="hljs-attr">style</span>]=<span class="hljs-string">&quot;style2&quot;</span>&gt;</span>style2<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="hljs-comment">/******提示：不能使用数组形式的参数 style3 = [&#x27;width&#x27;, &#x27;200px&#x27;];******/</span><br></code></pre></td></tr></table></figure><p><a href="https://angular.cn/guide/template-syntax#styling-precedence">样式优先级</a></p><ul><li>某个类或样式绑定越具体，它的优先级就越高</li><li>绑定总是优先于静态属性</li></ul><h2 id="事件绑定"><a href="#事件绑定" class="headerlink" title="事件绑定"></a>事件绑定</h2><p>语法：<img src="https://img-blog.csdnimg.cn/img_convert/188d0795bd4afd938e5e5801d6893957.png#pic_center" alt="在这里插入图片描述"></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">// src/app/app.component.ts </span><br>... <br><span class="hljs-keyword">export</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AppComponent</span> </span>&#123; <br>  <span class="hljs-function"><span class="hljs-title">onClick</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;onClick&#x27;</span>);<br>  &#125;;<br>  <span class="hljs-function"><span class="hljs-title">onClick2</span>(<span class="hljs-params">event: MouseEvent</span>)</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;onClick&#x27;</span>, event.target);<br>  &#125;;<br>&#125; <br><span class="hljs-comment">// src/app/app.component.html </span><br>...<br>&lt;!-- 不同于vue,这里需要用()来调用函数 --&gt;<br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> (<span class="hljs-attr">click</span>)=<span class="hljs-string">&quot;onClick()&quot;</span>&gt;</span>btn<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>&lt;!-- 这里一定是$event,就是原生的事件对象--&gt;<br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> (<span class="hljs-attr">click</span>)=<span class="hljs-string">&quot;onClick2($event)&quot;</span>&gt;</span>btn2<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>&lt;!-- 绑定方法的等号后面可以写任意js代码--&gt; <br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> ((<span class="hljs-attr">click</span>)=<span class="hljs-string">&quot;$event.preventDefault();text = &#x27;a&#x27;;&quot;</span>&gt;</span>btn2<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p><em><strong>至此，我们常用的插值、模版表达式与绑定属性介绍完毕，总的来说还算简单，唯一需要注意的就是保持代码格式统一，不然显得很乱。</strong></em></p><p><em>还是老样子，欢迎关注我的公众号，<strong>公众号会最先更新</strong></em></p><p><img src="https://img-blog.csdnimg.cn/img_convert/2ed94c3f0147a84d6e24a0625dacbb40.png#pic_center" alt="在这里插入图片描述"></p>]]></content>
    
    
    <categories>
      
      <category>angular</category>
      
    </categories>
    
    
    <tags>
      
      <tag>binding</tag>
      
      <tag>property</tag>
      
      <tag>class</tag>
      
      <tag>style</tag>
      
      <tag>event</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Angular ngif ngswitch ngfor</title>
    <link href="/angular/ngif-ngswitch-ngfor/"/>
    <url>/angular/ngif-ngswitch-ngfor/</url>
    
    <content type="html"><![CDATA[<h1 id="ngIf、ngSwitch、ngForOf"><a href="#ngIf、ngSwitch、ngForOf" class="headerlink" title="ngIf、ngSwitch、ngForOf"></a>ngIf、ngSwitch、ngForOf</h1><blockquote><p>这一节，我们将介绍angular内置指令：ngIf、ngSwitch、ngForOf。这也是日常开发中经常会遇到的常见指令。</p></blockquote><span id="more"></span><h2 id="ngIf"><a href="#ngIf" class="headerlink" title="ngIf"></a>ngIf</h2><blockquote><p>ngIf是内置的结构型指令，控制宿主元素的添加或删除，取决于绑定的值是否为真。（跟vue的v-if是类似的，不是控制display属性）</p></blockquote><h2 id="单独使用ngIf"><a href="#单独使用ngIf" class="headerlink" title="单独使用ngIf"></a>单独使用ngIf</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">import</span> &#123; Component, OnInit &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@angular/core&#x27;</span>;<br><span class="hljs-meta">@Component</span>(&#123;<br>  <span class="hljs-attr">selector</span>: <span class="hljs-string">&#x27;app-ng-if&#x27;</span>,<br>  <span class="hljs-attr">template</span>: <span class="hljs-string">`</span><br><span class="hljs-string">    &lt;div *ngIf=&quot;condition&quot;&gt;condition为真是显示&lt;/div&gt;</span><br><span class="hljs-string">  `</span>,<br>&#125;)<br><span class="hljs-keyword">export</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">NgIfComponent</span> <span class="hljs-title">implements</span> <span class="hljs-title">OnInit</span> </span>&#123;<br>  condition = <span class="hljs-literal">true</span>;<br>  ...<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>ngIf可以用于任何HTML元素。 *ngIf是个语法糖，上个例子完整的写法如下：</p></blockquote><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">import</span> &#123; Component, OnInit &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@angular/core&#x27;</span>;<br><span class="hljs-meta">@Component</span>(&#123;<br>  <span class="hljs-attr">selector</span>: <span class="hljs-string">&#x27;app-ng-if&#x27;</span>,<br>  <span class="hljs-attr">template</span>: <span class="hljs-string">`</span><br><span class="hljs-string">    &lt;ng-template [ngIf]=&quot;condition&quot;&gt;</span><br><span class="hljs-string">      &lt;div&gt;condition为真是显示&lt;/div&gt;</span><br><span class="hljs-string">    &lt;/ng-template&gt;</span><br><span class="hljs-string">  `</span>,<br>&#125;)<br><span class="hljs-keyword">export</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">NgIfComponent</span> <span class="hljs-title">implements</span> <span class="hljs-title">OnInit</span> </span>&#123;<br>  condition = <span class="hljs-literal">true</span>;<br>  <span class="hljs-comment">// ...</span><br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>**ng-template是一块内嵌模板，类型是<a href="https://angular.cn/api/core/TemplateRef">TemplateRef</a>。（跟vue的<code>template</code>类似）</p></blockquote><p>当然，我们平时根本就不着这么写，简写*ngIf足矣。</p><h3 id="配合ngIfElese使用"><a href="#配合ngIfElese使用" class="headerlink" title="配合ngIfElese使用"></a>配合ngIfElese使用</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">import</span> &#123; Component, OnInit &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@angular/core&#x27;</span>;<br><span class="hljs-meta">@Component</span>(&#123;<br>  <span class="hljs-attr">selector</span>: <span class="hljs-string">&#x27;app-ng-if&#x27;</span>,<br>  <span class="hljs-attr">template</span>: <span class="hljs-string">`</span><br><span class="hljs-string">    &lt;button class=&quot;btn btn-primary btn-small&quot; (click)=&quot;condition = !condition&quot;&gt;切换condition&lt;/button&gt;</span><br><span class="hljs-string">    &lt;div *ngIf=&quot;condition; else elseBlock&quot;&gt;condition为真是显示&lt;/div&gt;</span><br><span class="hljs-string">    &lt;ng-template #elseBlock&gt;</span><br><span class="hljs-string">      &lt;div&gt;condition为假是显示&lt;/div&gt;</span><br><span class="hljs-string">    &lt;/ng-template&gt;</span><br><span class="hljs-string">  `</span>,<br>&#125;)<br><span class="hljs-keyword">export</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">NgIfComponent</span> <span class="hljs-title">implements</span> <span class="hljs-title">OnInit</span> </span>&#123;<br>  condition = <span class="hljs-literal">true</span>;<br>  ...<br>&#125;<br></code></pre></td></tr></table></figure><p>这里需要注意的是：上面例子中的elseBlock并非组件中的某变量，而是TemplateRef的引用。（<em><strong>不带</strong></em><code>#</code>）</p><h3 id="使用TemplateRef"><a href="#使用TemplateRef" class="headerlink" title="使用TemplateRef"></a>使用TemplateRef</h3><blockquote><p>上面示例中的else后面跟的变量都是模板的引用而非组件中的变量，下面演示怎么用组件中的变量:</p></blockquote><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">// 1、引入TemplateRef、ViewChild</span><br><span class="hljs-keyword">import</span> &#123; Component, OnInit, TemplateRef, ViewChild &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@angular/core&#x27;</span>;<br><br><span class="hljs-meta">@Component</span>(&#123;<br>  <span class="hljs-attr">selector</span>: <span class="hljs-string">&#x27;app-ng-if&#x27;</span>,<br>  <span class="hljs-attr">template</span>:  <span class="hljs-string">`</span><br><span class="hljs-string">    &lt;button class=&quot;btn btn-primary btn-small&quot; (click)=&quot;condition = !condition&quot;&gt;切换condition&lt;/button&gt;</span><br><span class="hljs-string">    &lt;div *ngIf=&quot;condition; else elseBlocks&quot;&gt;condition为真是显示&lt;/div&gt;</span><br><span class="hljs-string">    &lt;ng-template #otherTel&gt;</span><br><span class="hljs-string">      &lt;div&gt;condition为假是显示&lt;/div&gt;</span><br><span class="hljs-string">    &lt;/ng-template&gt;</span><br><span class="hljs-string">  `</span>,<br>&#125;)<br><span class="hljs-keyword">export</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">NgIfComponent</span> <span class="hljs-title">implements</span> <span class="hljs-title">OnInit</span> </span>&#123;<br>  condition = <span class="hljs-literal">true</span>;<br>  <span class="hljs-comment">// 2、生命一个TemplateRef类型的变量</span><br>  elseBlocks: TemplateRef&lt;<span class="hljs-built_in">any</span>&gt; = <span class="hljs-literal">null</span>; <br>  <span class="hljs-comment">// 3、将页面上的引用为otherTel的template赋值给变量otherTemplate。</span><br>  <span class="hljs-comment">// @ViewChild() 现在可以理解为：是获取页面元素的一种方式，后面会详细介绍</span><br>  <span class="hljs-meta">@ViewChild</span>(<span class="hljs-string">&#x27;otherTel&#x27;</span>, &#123; <span class="hljs-attr">static</span>: <span class="hljs-literal">true</span> &#125;) otherTemplate: TemplateRef&lt;<span class="hljs-built_in">any</span>&gt; = <span class="hljs-literal">null</span>;<br><br>  <span class="hljs-comment">// ...</span><br><br>  ngOnInit(): <span class="hljs-built_in">void</span> &#123;<br>    <span class="hljs-comment">// 4、给声名的变量elseBlocks赋值为otherTemplate</span><br>    <span class="hljs-built_in">this</span>.elseBlocks = <span class="hljs-built_in">this</span>.otherTemplate;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>问：为什么我们需要使用变量的形式来进行条件筛选呢？</p><p>答：相较于模板的引用，变量的形式可以更加灵活。我们可以根据不同的需求，给<code>elseBlocks</code>赋予不同的值，而模板引用的形式只能是写死的一段内容。</p></blockquote><h2 id="ngSwitch"><a href="#ngSwitch" class="headerlink" title="ngSwitch"></a>ngSwitch</h2><blockquote><p>ngSwitch是内置的结构型指令，控制显示哪个模版，类似js中的switch</p></blockquote><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs typescript">...<br><span class="hljs-meta">@Component</span>(&#123;<br>  <span class="hljs-attr">selector</span>: <span class="hljs-string">&#x27;app-ng-switch&#x27;</span>,<br>  <span class="hljs-attr">template</span>: <span class="hljs-string">`</span><br><span class="hljs-string">    &lt;p&gt;</span><br><span class="hljs-string">      &lt;input type=&quot;radio&quot; name=&quot;fruit&quot; value=&quot;apple&quot; id=&quot;apple&quot; [(ngModel)]=&quot;fruit&quot; /&gt;</span><br><span class="hljs-string">      &lt;label for=&quot;apple&quot;&gt;🍎&lt;/label&gt;</span><br><span class="hljs-string">    &lt;/p&gt;</span><br><span class="hljs-string">    &lt;p&gt;</span><br><span class="hljs-string">      &lt;input type=&quot;radio&quot; name=&quot;fruit&quot; value=&quot;pear&quot; id=&quot;pear&quot; [(ngModel)]=&quot;fruit&quot; /&gt;</span><br><span class="hljs-string">      &lt;label for=&quot;pear&quot;&gt;🍐&lt;/label&gt;</span><br><span class="hljs-string">    &lt;/p&gt;</span><br><span class="hljs-string">    &lt;p&gt;</span><br><span class="hljs-string">      &lt;input type=&quot;radio&quot; name=&quot;fruit&quot; value=&quot;other&quot; id=&quot;other&quot; [(ngModel)]=&quot;fruit&quot; /&gt;</span><br><span class="hljs-string">      &lt;label for=&quot;other&quot;&gt;other&lt;/label&gt;</span><br><span class="hljs-string">    &lt;/p&gt;</span><br><span class="hljs-string">    选择的水果: &#123;&#123; fruit &#125;&#125;</span><br><span class="hljs-string">    &lt;div class=&quot;content&quot; [ngSwitch]=&quot;fruit&quot;&gt;</span><br><span class="hljs-string">      &lt;p *ngSwitchCase=&quot;&#x27;apple&#x27;&quot;&gt;这是苹果&lt;/p&gt;</span><br><span class="hljs-string">      &lt;p *ngSwitchCase=&quot;&#x27;pear&#x27;&quot;&gt;这是梨&lt;/p&gt;</span><br><span class="hljs-string">      &lt;p *ngSwitchDefault&gt;啥都不是&lt;/p&gt;</span><br><span class="hljs-string">    &lt;/div&gt;</span><br><span class="hljs-string">  `</span>,<br>&#125;)<br><span class="hljs-keyword">export</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">NgSwitchComponent</span> <span class="hljs-title">implements</span> <span class="hljs-title">OnInit</span> </span>&#123;<br>  fruit = <span class="hljs-string">&#x27;&#x27;</span>;<br>  <span class="hljs-comment">// ...</span><br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>这个其实比较简单，但是需要注意写法：<code>[ngSwitch]="变量"</code> <code>*ngSwitchCase="'字符串'"</code></p></blockquote><h2 id="NgForOf"><a href="#NgForOf" class="headerlink" title="NgForOf"></a>NgForOf</h2><blockquote><p>ngForOf,列表渲染，对比vue，跟v-for类似</p></blockquote><h3 id="基础用法"><a href="#基础用法" class="headerlink" title="基础用法"></a>基础用法</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">import</span> &#123; Component, OnInit &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@angular/core&#x27;</span>;<br><span class="hljs-keyword">const</span> Heros: Hero[] = [<br>  &#123;<span class="hljs-attr">id</span>: <span class="hljs-string">&#x27;hero_0&#x27;</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;盖伦&#x27;</span>&#125;,<br>  &#123;<span class="hljs-attr">id</span>: <span class="hljs-string">&#x27;hero_1&#x27;</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;赵信&#x27;</span>&#125;,<br>  &#123;<span class="hljs-attr">id</span>: <span class="hljs-string">&#x27;hero_2&#x27;</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;嘉文&#x27;</span>&#125;,<br>  &#123;<span class="hljs-attr">id</span>: <span class="hljs-string">&#x27;hero_3&#x27;</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;易大师&#x27;</span>&#125;,<br>];<br><span class="hljs-keyword">interface</span> Hero &#123;<br>  <span class="hljs-attr">id</span>: <span class="hljs-built_in">string</span>;<br>  name: <span class="hljs-built_in">string</span>;<br>&#125;<br><br><span class="hljs-meta">@Component</span>(&#123;<br>  <span class="hljs-attr">selector</span>: <span class="hljs-string">&#x27;app-ng-for&#x27;</span>,<br>  <span class="hljs-attr">template</span>: <span class="hljs-string">`</span><br><span class="hljs-string">    &lt;ul&gt;</span><br><span class="hljs-string">      &lt;li *ngFor=&quot;let item of heros&quot;&gt;&#123;&#123; item.id &#125;&#125;&lt;/li&gt;</span><br><span class="hljs-string">    &lt;/ul&gt;</span><br><span class="hljs-string">  `</span>,<br>&#125;)<br><span class="hljs-keyword">export</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">NgForComponent</span> <span class="hljs-title">implements</span> <span class="hljs-title">OnInit</span> </span>&#123;<br>  <span class="hljs-attr">heros</span>: Hero[] = Heros;<br>  <span class="hljs-comment">//...</span><br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p><strong>注意点：</strong><br>1、<code>*ngFor=""</code><br>2、<code>let * of *</code> (vue使用的是：<code>in</code>)</p></blockquote><h3 id="局部变量"><a href="#局部变量" class="headerlink" title="局部变量"></a>局部变量</h3><p>NgForOf 导出了一系列值，可以指定别名后作为局部变量使用：</p><ul><li><code>$implicit: T</code>：迭代目标（绑定到ngForOf）中每个条目的值。</li><li><code>ngForOf: NgIterable<T></code>：迭代表达式的值。当表达式不局限于访问某个属性时，这会非常有用，比如在使用 async 管道时（userStreams | async）。</li><li><code>index: number</code>：可迭代对象中当前条目的索引。</li><li><code>count: number</code>：可迭代对象的长度。</li><li><code>first: boolean</code>：如果当前条目是可迭代对象中的第一个条目则为 true。</li><li><code>last: boolean</code>：如果当前条目是可迭代对象中的最后一个条目则为 true。</li><li><code>even: boolean</code>：如果当前条目在可迭代对象中的索引号为偶数则为 true。</li><li><code>odd: boolean</code>：如果当前条目在可迭代对象中的索引号为奇数则为 true。</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs typescript">...<br><span class="hljs-meta">@Component</span>(&#123;<br>  <span class="hljs-attr">selector</span>: <span class="hljs-string">&#x27;app-ng-for&#x27;</span>,<br>  <span class="hljs-attr">template</span>: <span class="hljs-string">`</span><br><span class="hljs-string">    &lt;ul&gt;</span><br><span class="hljs-string">      &lt;li *ngFor=&quot;let item of heros; let f = first; let l = last; count as len; index as i; let e = even; odd as o&quot;&gt;</span><br><span class="hljs-string">        &lt;p&gt;first: &#123;&#123; f &#125;&#125; -- last: &#123;&#123; l &#125;&#125;&lt;/p&gt;</span><br><span class="hljs-string">        &lt;p&gt;name: &#123;&#123; item.name &#125;&#125;&lt;/p&gt;</span><br><span class="hljs-string">        &lt;p&gt;length: &#123;&#123; len &#125;&#125;&lt;/p&gt;</span><br><span class="hljs-string">        &lt;p&gt;index: &#123;&#123; i &#125;&#125;&lt;/p&gt;</span><br><span class="hljs-string">        &lt;p&gt;even: &#123;&#123; e &#125;&#125;&lt;/p&gt;</span><br><span class="hljs-string">        &lt;p&gt;odd: &#123;&#123; o &#125;&#125;&lt;/p&gt;</span><br><span class="hljs-string">        &lt;hr /&gt;</span><br><span class="hljs-string">      &lt;/li&gt;</span><br><span class="hljs-string">    &lt;/ul&gt;</span><br><span class="hljs-string">  `</span>,<br>&#125;)<br>...<br></code></pre></td></tr></table></figure><blockquote><p>从上面可以看出，局部变量可以采取<code>let</code>及<code>as</code>方式赋值，使用时用变量名。</p></blockquote><h3 id="trackBy"><a href="#trackBy" class="headerlink" title="trackBy"></a>trackBy</h3><blockquote><p>当迭代器的内容变化时，<code>NgForOf</code>会对<code>DOM</code>做出相应的修改。但是，如果其中有内容根本没有发生变化呢？我们是不需要全部更新修改<code>DOM</code>的，从而节省开销。</p><p><code>trackBy</code>就是解决这个问题的法宝。<code>trackBy</code>接收一个函数，返回 <code>ngFor</code>应该跟踪的值（比如<code>id</code>），这样刷新列表时，<code>id</code>相同的<code>dom</code>不会触发更新</p></blockquote><p>我们将前面的heros数组第二跟第四条数据修改下：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-meta">@Component</span>(&#123;<br>  <span class="hljs-attr">selector</span>: <span class="hljs-string">&#x27;app-ng-for&#x27;</span>,<br>  <span class="hljs-attr">template</span>: <span class="hljs-string">`</span><br><span class="hljs-string">    &lt;button class=&quot;btn btn-primary&quot; (click)=&quot;reset()&quot;&gt;重置&lt;/button&gt;</span><br><span class="hljs-string">    &lt;ul&gt;</span><br><span class="hljs-string">      &lt;li *ngFor=&quot;let item of heros; trackBy: trackByHero &quot;&gt;&#123;&#123; item.name &#125;&#125;&lt;/li&gt;</span><br><span class="hljs-string">    &lt;/ul&gt;</span><br><span class="hljs-string">  `</span>,<br>  <span class="hljs-attr">styles</span>: [<br>  ]<br>&#125;)<br><span class="hljs-keyword">export</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">NgForComponent</span> <span class="hljs-title">implements</span> <span class="hljs-title">OnInit</span> </span>&#123;<br>  <span class="hljs-attr">heros</span>: Hero[] = Heros;<br> <span class="hljs-comment">// ...</span><br>  <span class="hljs-function"><span class="hljs-title">reset</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-built_in">this</span>.heros = [<br>      &#123;<span class="hljs-attr">id</span>: <span class="hljs-string">&#x27;hero_0&#x27;</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;盖伦&#x27;</span>&#125;,<br>      &#123;<span class="hljs-attr">id</span>: <span class="hljs-string">&#x27;hero_4&#x27;</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;赵信2&#x27;</span>&#125;,<br>      &#123;<span class="hljs-attr">id</span>: <span class="hljs-string">&#x27;hero_2&#x27;</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;嘉文&#x27;</span>&#125;,<br>      &#123;<span class="hljs-attr">id</span>: <span class="hljs-string">&#x27;hero_5&#x27;</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;易大师2&#x27;</span>&#125;,<br>    ]<br>  &#125;<br>  <span class="hljs-function"><span class="hljs-title">trackByHero</span>(<span class="hljs-params">hero: Hero</span>)</span> &#123;<br>    <span class="hljs-keyword">return</span> hero.id;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>页面效果如下：</p><p><img src="https://img-blog.csdnimg.cn/img_convert/6ee5b71833be0674f0520ee5a50ae95a.gif#pic_center"></p><p>当我们点击重置的时候，可以看出，第一条跟第三条数据，页面是没有更新的，从而达到节约开销的作用。</p><blockquote><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>其实这一节的难度不是很大，需要注意一下几点：</p><p>1、<code>*ngIf="condition"</code></p><p>2、<code>[ngSwitch]="变量"</code> <code>*ngSwitchCase=""</code></p><p>3、<code>*ngFor="let * of *"</code></p><p>4、局部变量的使用可以让我们的程序更简便</p><p>5、<code>trackBy</code>很重要</p></blockquote><p><em><strong>欢迎关注我的公众号，公众号将第一时间更新angular教程：</strong></em><br><img src="https://img-blog.csdnimg.cn/img_convert/2ed94c3f0147a84d6e24a0625dacbb40.png#pic_center#pic_center"></p>]]></content>
    
    
    <categories>
      
      <category>angular</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ngif</tag>
      
      <tag>ngswitch</tag>
      
      <tag>ngfor</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Angular 环境搭建</title>
    <link href="/angular/init/"/>
    <url>/angular/init/</url>
    
    <content type="html"><![CDATA[<blockquote><p>本文介绍angular的环境搭建，以及配置bootstrap~</p></blockquote><span id="more"></span><h2 id="1-安装全局ANGULAR-CLI"><a href="#1-安装全局ANGULAR-CLI" class="headerlink" title="1.安装全局ANGULAR CLI"></a>1.安装全局ANGULAR CLI</h2><blockquote><p>默认已经安装node环境</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install -g @angular/cli@10  // windows<br>sudo npm install -g @angular/cli@10  // macOS<br></code></pre></td></tr></table></figure><p>安装成功后执行ng –version，出现下图则表示安装成功<br><img src="https://img-blog.csdnimg.cn/img_convert/2324106f9ce87de7a85357841512b658.png#pic_center"></p><h2 id="2-创建项目"><a href="#2-创建项目" class="headerlink" title="2.创建项目"></a>2.创建项目</h2><p>确定一个你项目需要安装的目录，用终端打开文件夹，执行ng new hero（hero是你的项目名称）。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">ng new &lt;name&gt; [options]<br>ng n &lt;name&gt; [options] // 简写<br><br>// options具体参数详见 https://angular.cn/cli/new<br>// 这里给出我这个项目的ng new指令<br>ng new hero --routing=<span class="hljs-literal">true</span> --style=scss --skipTests<br>// 含义是，添加routing路由文件，采用scss作为默认预处理样式，不安装单元测试文件<br></code></pre></td></tr></table></figure><p>执行了上面指令，cli将自动安装依赖到你的项目。项目默认结构如下：</p><p><img src="https://img-blog.csdnimg.cn/img_convert/26b25206e28e070e400b3cd97dc97d01.png#pic_center"><br>为了方便开发，我们先修改下package.json 文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">// <span class="hljs-string">&quot;scripts&quot;</span>下<span class="hljs-string">&quot;start&quot;</span>添加 --open，当启动项目时将自动在浏览器打开<br><span class="hljs-string">&quot;start&quot;</span>: <span class="hljs-string">&quot;ng serve --open&quot;</span><br></code></pre></td></tr></table></figure><p><strong>启动项目</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm run start<br></code></pre></td></tr></table></figure><p>如果一切正常，浏览器将正常打开<a href="http://localhost:4200/">http://localhost:4200/</a></p><h2 id="3-安装BOOTSTRAP"><a href="#3-安装BOOTSTRAP" class="headerlink" title="3.安装BOOTSTRAP"></a>3.安装BOOTSTRAP</h2><p>为了减少样式的书写，本项目将使用bootstrap(v4.5.3)。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">// 因为bootstrap依赖jquery跟popper.js,所以安装的时候一并安装<br><br>npm install bootstrap jquery popper.js -S<br></code></pre></td></tr></table></figure><p>安装成功后需要引入boot的样式文件，修改<em><strong>styles.scss</strong></em> 文件：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">// styles.scss</span><br><span class="hljs-comment">// 添加下面代码到文件顶部</span><br><span class="hljs-meta">@import</span> <span class="hljs-string">&#x27;~bootstrap&#x27;</span><br></code></pre></td></tr></table></figure><p>引入JS文件，在<em><strong>main.ts</strong></em>中引入bootstrap：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;bootstrap&#x27;</span>;<br></code></pre></td></tr></table></figure><p>清空src/app/app.component.html文件，并添加下面代码，来验证bootstrap是否安装成功：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- app.component.html --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;alert alert-primary&quot;</span> <span class="hljs-attr">role</span>=<span class="hljs-string">&quot;alert&quot;</span>&gt;</span><br>  A simple primary alert—check it out!<br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;dropdown&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-secondary dropdown-toggle&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;dropdownMenuButton&quot;</span> <span class="hljs-attr">data-toggle</span>=<span class="hljs-string">&quot;dropdown&quot;</span> <span class="hljs-attr">aria-haspopup</span>=<span class="hljs-string">&quot;true&quot;</span> <span class="hljs-attr">aria-expanded</span>=<span class="hljs-string">&quot;false&quot;</span>&gt;</span><br>    Dropdown button<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;dropdown-menu&quot;</span> <span class="hljs-attr">aria-labelledby</span>=<span class="hljs-string">&quot;dropdownMenuButton&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;dropdown-item&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>Action<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;dropdown-item&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>Another action<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;dropdown-item&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>Something else here<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p>页面已经运用上bootstrap的样式则安装成功</p><p><img src="https://img-blog.csdnimg.cn/img_convert/c077b44809ab1506bf26426b66fef980.png#pic_center"></p><blockquote><p>至此，angular10 的环境配置全部完成，顺便还装了一个bootstrap～</p></blockquote><blockquote><p><em><strong>还有一件重要的事，欢迎大家关注我的公众号，</strong>公众号会最先更新</em>****</p></blockquote><blockquote><p><img src="https://img-blog.csdnimg.cn/img_convert/2ed94c3f0147a84d6e24a0625dacbb40.png#pic_center"></p></blockquote>]]></content>
    
    
    <categories>
      
      <category>angular</category>
      
    </categories>
    
    
    <tags>
      
      <tag>环境搭建</tag>
      
      <tag>bootstrap</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Number Animate--JS快速改变页面数字变化过程动画</title>
    <link href="/javascript/number-animate/"/>
    <url>/javascript/number-animate/</url>
    
    <content type="html"><![CDATA[<h1 id="Animate–JS快速改变页面数字变化过程动画"><a href="#Animate–JS快速改变页面数字变化过程动画" class="headerlink" title="Animate–JS快速改变页面数字变化过程动画"></a>Animate–JS快速改变页面数字变化过程动画</h1><blockquote><p>通过定时器，快速修改页面上数字，页面初始化时常用功能。</p></blockquote><span id="more"></span><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 判断是否是数字</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">isNumeric</span>(<span class="hljs-params">n</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> !<span class="hljs-built_in">isNaN</span>(<span class="hljs-built_in">parseFloat</span>(n)) &amp;&amp; <span class="hljs-built_in">isFinite</span>(n);<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">/**</span><br><span class="hljs-comment">*判断一个数有几位小数</span><br><span class="hljs-comment">*<span class="hljs-doctag">@param <span class="hljs-type">&#123;number&#125;</span> <span class="hljs-variable">number</span></span></span><br><span class="hljs-comment">*/</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getDecimalPoint</span>(<span class="hljs-params">number</span>) </span>&#123;<br>  <span class="hljs-keyword">if</span>(!isNumeric(number)) &#123;<span class="hljs-keyword">return</span>;&#125;<br>  <span class="hljs-keyword">var</span> num = <span class="hljs-built_in">parseFloat</span>(number);<br>  <span class="hljs-keyword">var</span> str = num.toString();<br>  <span class="hljs-keyword">var</span> x = str.indexOf(<span class="hljs-string">&#x27;.&#x27;</span>); <br>  <span class="hljs-keyword">if</span> (x &gt; -<span class="hljs-number">1</span>) &#123;<br>    <span class="hljs-keyword">return</span> str.length - x - <span class="hljs-number">1</span>;<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>   <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 快速改变页面数字，数字增加过程</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;string&#125;</span> </span>selector 可以被jquery选中的选择器（标签内不应有除了数字以外其他内容）</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;Object&#125;</span> </span>param1 </span><br><span class="hljs-comment"> * &#123;</span><br><span class="hljs-comment"> *    duration: 数字变化过程的时间 默认：2000sm,</span><br><span class="hljs-comment"> *    timeStep: 变化间隔时间 默认: 50ms,</span><br><span class="hljs-comment"> *    start: 数字变化起始值,</span><br><span class="hljs-comment"> *    end: 数字变化最终值</span><br><span class="hljs-comment"> * &#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">ChangeDomNum</span>(<span class="hljs-params">selector, _ref</span>) </span>&#123;<br>  <span class="hljs-keyword">var</span> start = _ref.start,<br>      end = _ref.end,<br>      duration = _ref.duration,<br>      timeStep = _ref.timeStep;<br><br>  <span class="hljs-keyword">if</span> (<br>    (duration &amp;&amp; !isNumeric(duration)) ||<br>    (timeStep &amp;&amp; !isNumeric(timeStep)) ||<br>    !isNumeric(start) ||<br>    !isNumeric(end) ||<br>    start === end<br>  ) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    duration = <span class="hljs-built_in">parseFloat</span>(duration);<br>    timeStep = <span class="hljs-built_in">parseFloat</span>(timeStep);<br>    start = <span class="hljs-built_in">parseFloat</span>(start);<br>    end = <span class="hljs-built_in">parseFloat</span>(end);<br>  &#125;<br><br>  <span class="hljs-keyword">var</span> timeStepRel = timeStep || <span class="hljs-number">50</span>;<br>  <span class="hljs-keyword">var</span> startRel = start || <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">var</span> duringRel = duration || <span class="hljs-number">2000</span>;<br>  <span class="hljs-keyword">var</span> result = startRel;<br>  <span class="hljs-keyword">var</span> decimalPonit = <span class="hljs-built_in">Math</span>.max(getDecimalPoint(end), getDecimalPoint(start)); <span class="hljs-comment">// 几位小数</span><br><br>  <span class="hljs-keyword">var</span> timeCount = <span class="hljs-built_in">Math</span>.ceil(duringRel / timeStepRel);<br>  <span class="hljs-keyword">var</span> step = <span class="hljs-built_in">parseFloat</span>(((end - startRel) / timeCount).toFixed(decimalPonit));<br>  <span class="hljs-keyword">var</span> timer = <span class="hljs-literal">null</span>;<br>  timer = <span class="hljs-built_in">setInterval</span>(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    result += step;<br><br>    <span class="hljs-keyword">if</span> (step &gt; <span class="hljs-number">0</span> &amp;&amp; result &gt;= end) &#123;<br>      result = end;<br>      <span class="hljs-built_in">clearInterval</span>(timer);<br>      timer = <span class="hljs-literal">null</span>;<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (step &lt; <span class="hljs-number">0</span> &amp;&amp; result &lt;= start) &#123;<br>      result = start;<br>      <span class="hljs-built_in">clearInterval</span>(timer);<br>      timer = <span class="hljs-literal">null</span>;<br>    &#125;<br><br>    $(selector).text(result.toFixed(decimalPonit));<br>  &#125;, timeStepRel);<br>&#125;<br></code></pre></td></tr></table></figure><p>调用：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 调用：</span><br>changeDomNum(<br>  <span class="hljs-string">&#x27;#downloadsNum&#x27;</span>, <br>  &#123;<span class="hljs-attr">start</span>: <span class="hljs-number">0</span>, <span class="hljs-attr">end</span>: <span class="hljs-number">123.5</span>, <span class="hljs-attr">duration</span>: <span class="hljs-number">2000</span>, <span class="hljs-attr">timeStep</span>: <span class="hljs-number">50</span>&#125;<br>);<br></code></pre></td></tr></table></figure><p>效果：</p><p><img src="https://img-blog.csdnimg.cn/img_convert/4ef4a0ad66e3dd667c8d9bf6d993221a.gif#pic_center"></p><hr><p><em><strong>欢迎关注我的公众号，公众号将第一时间更新angular教程：</strong></em><br><img src="https://img-blog.csdnimg.cn/img_convert/2ed94c3f0147a84d6e24a0625dacbb40.png#pic_center#pic_center"></p>]]></content>
    
    
    <categories>
      
      <category>javascript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数字变化动画</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Angular 权限管理</title>
    <link href="/angular/auth/"/>
    <url>/angular/auth/</url>
    
    <content type="html"><![CDATA[<h1 id="Angular-权限管理的两种解决方案"><a href="#Angular-权限管理的两种解决方案" class="headerlink" title="Angular 权限管理的两种解决方案"></a>Angular 权限管理的两种解决方案</h1><blockquote><p>在做后台管理系统的时候，权限管理应该是必备的功能点了。这一节我们介绍两种方案来确定用户权限。</p></blockquote><span id="more"></span><p>首先，我们面板是这个样子，先让大家有一个基础印象：</p><p><img src="https://img-blog.csdnimg.cn/20210528152542689.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3lhbnlpMjQ=,size_16,color_FFFFFF,t_70#pic_center"></p><h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><ol><li>首先我们通过 <code>cli</code>工具新建了一个 <code>heroes</code>模块，所有工作我们都将在这个模块中完成；</li><li>其次新建了 <code>heroes-add</code>、 <code>heroes-list</code>、 <code>heroes-login</code>、 <code>heroes-modify</code>四个页面模块，来分别实现不同的功能；</li><li>最后通过子路由的方式配置了项目的路由信息，以便让项目跑起来。</li><li>封装一些常用的方法为服务，以便多处使用：</li><li>添加请求拦截器，为已登录用户每次的请求头添加 <code>token</code>。（拦截器请参照7.2节介绍）</li></ol><h2 id="使用路由守卫控制权限"><a href="#使用路由守卫控制权限" class="headerlink" title="使用路由守卫控制权限"></a>使用路由守卫控制权限</h2><p>目前我们项目的状态是：无论用户是否登录，或者登录用户的权限如何，都能直接进行新增、修改、删除等操作。显然，这不是我们想要的。</p><p>所以，我们可以通过路由守卫来控制权限。</p><p>我们先给角色分配一下权限：</p><ul><li>superadmin: 拥有所有权限；</li><li>admin: 只有修改权限，没有删除、新增权限；</li><li>user: 只有查看权限，没有操作权限。</li></ul><p>给路由配置添加角色(<code>roles</code>数组)：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">const</span> routes: Routes = [<br>  &#123;<br>    <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;heroes&#x27;</span>,<br>    <span class="hljs-attr">component</span>: HeroesComponent,<br>    <span class="hljs-attr">children</span>: [<br>      &#123; <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;list&#x27;</span>, <span class="hljs-attr">component</span>: HeroesListComponent&#125;,<br>      &#123;<br>        <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;login&#x27;</span>,<br>        <span class="hljs-attr">loadChildren</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&#x27;./heroes-login/heroes-login.module&#x27;</span>).then(<span class="hljs-function"><span class="hljs-params">m</span> =&gt;</span> m.HeroesLoginModule),<br>        <span class="hljs-attr">canActivate</span>: [LoginAuthGuard]<br>      &#125;,<br>      &#123;<br>        <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;add&#x27;</span>,<br>        <span class="hljs-attr">loadChildren</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&#x27;./heroes-add/heroes-add.module&#x27;</span>).then(<span class="hljs-function"><span class="hljs-params">m</span> =&gt;</span> m.HeroesAddModule),<br>        <span class="hljs-attr">canActivate</span>: [AuthGuard],<br>        <span class="hljs-attr">data</span>: &#123;<span class="hljs-attr">roles</span>: [<span class="hljs-string">&#x27;superadmin&#x27;</span>]&#125;<br>      &#125;,<br>      &#123;<br>        <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;modify/:id&#x27;</span>,<br>        <span class="hljs-attr">loadChildren</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&#x27;./heroes-modify/heroes-modify.module&#x27;</span>).then(<span class="hljs-function"><span class="hljs-params">m</span> =&gt;</span> m.HeroesModifyModule),<br>        <span class="hljs-attr">canActivate</span>: [AuthGuard],<br>        <span class="hljs-attr">data</span>: &#123;<span class="hljs-attr">roles</span>: [<span class="hljs-string">&#x27;superadmin&#x27;</span>, <span class="hljs-string">&#x27;admin&#x27;</span>]&#125;<br>      &#125;,<br>      &#123; <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-attr">redirectTo</span>: <span class="hljs-string">&#x27;list&#x27;</span>, <span class="hljs-attr">pathMatch</span>: <span class="hljs-string">&#x27;full&#x27;</span> &#125;<br>    ]<br>  &#125;<br>];<br></code></pre></td></tr></table></figure><p>新建一个 <code>auth</code>守卫</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">ng g g demos/heroes/guards/auth<br></code></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">// auth.guard.ts</span><br><span class="hljs-comment">// ...</span><br><span class="hljs-keyword">export</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AuthGuard</span> <span class="hljs-title">implements</span> <span class="hljs-title">CanActivate</span> </span>&#123;<br>  <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params"></span></span><br><span class="hljs-params"><span class="hljs-function">    <span class="hljs-keyword">private</span> userServe: UserService,</span></span><br><span class="hljs-params"><span class="hljs-function">    <span class="hljs-keyword">private</span> router: Router,</span></span><br><span class="hljs-params"><span class="hljs-function">    <span class="hljs-keyword">private</span> accountServe: AccoutService,</span></span><br><span class="hljs-params"><span class="hljs-function">    <span class="hljs-keyword">private</span> windowServe: WindowService</span></span><br><span class="hljs-params"><span class="hljs-function">  </span>)</span> &#123;&#125;<br>  canActivate(route: ActivatedRouteSnapshot, <span class="hljs-attr">state</span>: RouterStateSnapshot): Observable&lt;<span class="hljs-built_in">boolean</span>&gt; &#123;<br>    <span class="hljs-comment">// 获取即将进入路由的角色配置</span><br>    <span class="hljs-keyword">const</span> roles: <span class="hljs-built_in">string</span>[] = route.data.roles;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.userServe.user$.pipe(<br>      switchMap(<span class="hljs-function"><span class="hljs-params">user</span> =&gt;</span> &#123;<br>        <span class="hljs-comment">// 判断用户是否登录</span><br>        <span class="hljs-keyword">if</span> (user) &#123;<br>          <span class="hljs-comment">// 匹配用户角色与路由权限配置</span><br>          <span class="hljs-keyword">if</span> (roles.includes(user.role)) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">of</span>(<span class="hljs-literal">true</span>);<br>          &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-built_in">this</span>.windowServe.alert(<span class="hljs-string">&#x27;没有权限&#x27;</span>);<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">of</span>(<span class="hljs-literal">false</span>);<br>          &#125;<br>        &#125;<br>        <span class="hljs-comment">// 未登录，去登录，拦截进入下个路由</span><br>        <span class="hljs-built_in">this</span>.accountServe.redirectTo = state.url;<br>        <span class="hljs-built_in">this</span>.windowServe.alert(<span class="hljs-string">&#x27;请先登录&#x27;</span>);<br>        <span class="hljs-built_in">this</span>.router.navigateByUrl(<span class="hljs-string">&#x27;/heroes/login&#x27;</span>).then();<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">of</span>(<span class="hljs-literal">false</span>);<br>      &#125;)<br>    );<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这样，我们就能大概实现拦截功能：</p><p>tips: 艾科–user  莫甘娜–superadmin  卡特–admin</p><p><img src="https://img-blog.csdnimg.cn/20210528152613946.gif#pic_center"></p><p>但是你会发现，我们还有个删除功能没做权限管理。<br>一般情况下，删除应该是不会跳转路由的，所以，我们需要另辟蹊径来处理。</p><h2 id="通过指令控制权限"><a href="#通过指令控制权限" class="headerlink" title="通过指令控制权限"></a>通过指令控制权限</h2><p>我们想要的结果其实就是：根据角色，页面上只展示有权限的按钮或其他跟权限有关的入口。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">ng g d demos/heroes/directives/auth<br></code></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">// auth.directive.ts</span><br><span class="hljs-keyword">import</span> &#123;Directive, Input, OnChanges, SimpleChanges, TemplateRef, ViewContainerRef&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@angular/core&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123;UserService&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../services/user.service&#x27;</span>;<br><br><span class="hljs-meta">@Directive</span>(&#123;<br>  <span class="hljs-attr">selector</span>: <span class="hljs-string">&#x27;[appAuth]&#x27;</span><br>&#125;)<br><span class="hljs-comment">// 实现 OnChanges 接口</span><br><span class="hljs-keyword">export</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AuthDirective</span> <span class="hljs-title">implements</span> <span class="hljs-title">OnChanges</span></span>&#123;<br>  <span class="hljs-comment">// 输入属性传值,获取有权限的角色</span><br>  <span class="hljs-meta">@Input</span>(<span class="hljs-string">&#x27;appAuth&#x27;</span>) roles: <span class="hljs-built_in">string</span>[] = [];<br>  hasView = <span class="hljs-literal">false</span>;<br>  <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params"></span></span><br><span class="hljs-params"><span class="hljs-function">    <span class="hljs-keyword">private</span> templateRef: TemplateRef&lt;<span class="hljs-built_in">any</span>&gt;,</span></span><br><span class="hljs-params"><span class="hljs-function">    <span class="hljs-keyword">private</span> viewContainer: ViewContainerRef,</span></span><br><span class="hljs-params"><span class="hljs-function">    <span class="hljs-keyword">private</span> userServe: UserService</span></span><br><span class="hljs-params"><span class="hljs-function">  </span>)</span> &#123;&#125;<br>  <span class="hljs-comment">// 在 ngOnChanges 阶段才能拿到输入属性的传值</span><br>  ngOnChanges(changes: SimpleChanges): <span class="hljs-built_in">void</span> &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.roles.length) &#123;<br>      <span class="hljs-built_in">this</span>.userServe.user$.subscribe(<span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> &#123;<br>        <span class="hljs-comment">// 没匹配到角色</span><br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.roles.includes(res?.role))&#123;<br>          <span class="hljs-built_in">this</span>.createView();<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>          <span class="hljs-built_in">this</span>.viewContainer.clear();<br>          <span class="hljs-built_in">this</span>.hasView = <span class="hljs-literal">false</span>;<br>        &#125;<br>      &#125;);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-built_in">this</span>.createView();<br>    &#125;<br>  &#125;<br>  <span class="hljs-comment">// 创建视图</span><br>  <span class="hljs-keyword">private</span> createView(): <span class="hljs-built_in">void</span> &#123;<br>    <span class="hljs-built_in">this</span>.viewContainer.createEmbeddedView(<span class="hljs-built_in">this</span>.templateRef);<br>    <span class="hljs-built_in">this</span>.hasView = <span class="hljs-literal">true</span>;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>使用指令：</p><p><img src="https://img-blog.csdnimg.cn/20210528152650484.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3lhbnlpMjQ=,size_16,color_FFFFFF,t_70#pic_center"></p><p>页面表现：</p><p><img src="https://img-blog.csdnimg.cn/20210528152703701.gif#pic_center"></p><p>至此，我们就实现了通过角色来进行权限管理的全部功能。</p><h2 id="通过动态配置权限实现权限管理"><a href="#通过动态配置权限实现权限管理" class="headerlink" title="通过动态配置权限实现权限管理"></a>通过动态配置权限实现权限管理</h2><p>在实际工作中，我们可能还会遇到这样的情况：用户的角色是不固定的，所拥有的权限也是动态配置的。这样的情况，我们如果采用上面的方式来做权限，那势必会经常修改我们页面上所配置的角色。所以，针对这样的情况就要采取另一种方式。</p><p>我们打算通过<strong>页面名</strong>与后台传入的权限进行 <code>view</code>、<code>new</code>、<code>delete</code>、<code>edit</code>等相应的权限控制。</p><p>为了演示，我们将会新建四个 <code>normal</code>、 <code>skill</code>、 <code>grade</code>、 <code>level</code>组件。<code>normal</code>是没有被权限控制的，所有用户都可以访问。</p><p>假如每个登录用户信息是这样的：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<br>  <span class="hljs-attr">&quot;name&quot;</span>: <span class="hljs-string">&quot;卡特&quot;</span>, <br>  <span class="hljs-attr">&quot;rights&quot;</span>: &#123;<br>    <span class="hljs-attr">&quot;skill&quot;</span>: [<span class="hljs-string">&quot;edit&quot;</span>, <span class="hljs-string">&quot;new&quot;</span>],<br>    <span class="hljs-attr">&quot;grade&quot;</span>: [<span class="hljs-string">&quot;view&quot;</span>]<br>  &#125;,<br>  ...<br>&#125;<br></code></pre></td></tr></table></figure><p>上面表示：用户‘卡特’没有访问 <code>level</code>页面的权限，可以在 <code>skill</code>页面编辑、新建，在 <code>grade</code>页面只能查看。</p><p>我们还是通过结构性指令来实现，如果没有权限，完全不显示对应入口的功能。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">ng g d demos/heroes/directives/rights<br></code></pre></td></tr></table></figure><p>对应需要控制的页面入口，我们通过传入<strong>页面名</strong>进行控制：</p><p><img src="https://img-blog.csdnimg.cn/20210528152719119.jpg#pic_center"></p><p>页面中需要控制的操作入口，通过传入<strong>操作类型</strong>来进行控制：</p><p><img src="https://img-blog.csdnimg.cn/20210528152729176.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3lhbnlpMjQ=,size_16,color_FFFFFF,t_70#pic_center"></p><p>方案确定，只差实现指令：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">// rights.directive.ts</span><br><span class="hljs-keyword">import</span> &#123;Directive, Input, OnChanges, SimpleChanges, TemplateRef, ViewContainerRef&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@angular/core&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123;UserService&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../services/user.service&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; Router&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@angular/router&#x27;</span>;<br><br><span class="hljs-meta">@Directive</span>(&#123;<br>  <span class="hljs-attr">selector</span>: <span class="hljs-string">&#x27;[appRights]&#x27;</span><br>&#125;)<br><span class="hljs-keyword">export</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RightsDirective</span> <span class="hljs-title">implements</span> <span class="hljs-title">OnChanges</span></span>&#123;<br>  <span class="hljs-comment">// 输入属性传值,获取配置</span><br>  <span class="hljs-meta">@Input</span>(<span class="hljs-string">&#x27;appRights&#x27;</span>) rights = <span class="hljs-string">&#x27;&#x27;</span>;<br>  hasView = <span class="hljs-literal">false</span>;<br>  <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params"></span></span><br><span class="hljs-params"><span class="hljs-function">    <span class="hljs-keyword">private</span> templateRef: TemplateRef&lt;<span class="hljs-built_in">any</span>&gt;,</span></span><br><span class="hljs-params"><span class="hljs-function">    <span class="hljs-keyword">private</span> viewContainer: ViewContainerRef,</span></span><br><span class="hljs-params"><span class="hljs-function">    <span class="hljs-keyword">private</span> userServe: UserService,</span></span><br><span class="hljs-params"><span class="hljs-function">    <span class="hljs-keyword">private</span> router: Router</span></span><br><span class="hljs-params"><span class="hljs-function">  </span>)</span> &#123;&#125;<br><br>  ngOnChanges(changes: SimpleChanges): <span class="hljs-built_in">void</span> &#123;<br>    <span class="hljs-keyword">const</span> pageName = <span class="hljs-built_in">this</span>.getPageName(<span class="hljs-built_in">this</span>.router.url);<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.rights) &#123;<br>      <span class="hljs-built_in">this</span>.userServe.user$.subscribe(<span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> &#123;<br>        <span class="hljs-keyword">if</span> (res?.rights) &#123;<br>          <span class="hljs-keyword">if</span> (<br>            res.rights[<span class="hljs-built_in">this</span>.rights] || <span class="hljs-comment">/* 匹配页面入口 */</span><br>            (res.rights[pageName] &amp;&amp; res.rights[pageName].includes(<span class="hljs-built_in">this</span>.rights)) <span class="hljs-comment">/* 匹配页面操作入口 */</span><br>          ) &#123;<br>            <span class="hljs-built_in">this</span>.createView();<br>          &#125;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>          <span class="hljs-built_in">this</span>.clearView();<br>        &#125;<br>      &#125;);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-built_in">this</span>.clearView();<br>    &#125;<br>  &#125;<br>  <span class="hljs-comment">// 创建视图</span><br>  <span class="hljs-keyword">private</span> createView(): <span class="hljs-built_in">void</span> &#123;<br>    <span class="hljs-built_in">this</span>.viewContainer.createEmbeddedView(<span class="hljs-built_in">this</span>.templateRef);<br>    <span class="hljs-built_in">this</span>.hasView = <span class="hljs-literal">true</span>;<br>  &#125;<br>  <span class="hljs-comment">// 清除视图</span><br>  <span class="hljs-keyword">private</span> clearView(): <span class="hljs-built_in">void</span> &#123;<br>    <span class="hljs-built_in">this</span>.viewContainer.clear();<br>    <span class="hljs-built_in">this</span>.hasView = <span class="hljs-literal">false</span>;<br>  &#125;<br>  <span class="hljs-comment">// 通过URL获取页面名</span><br>  <span class="hljs-keyword">private</span> getPageName(url: <span class="hljs-built_in">string</span>): <span class="hljs-built_in">string</span> &#123;<br>    <span class="hljs-keyword">const</span> str = url.split(<span class="hljs-string">&#x27;/&#x27;</span>).pop();<br>    <span class="hljs-keyword">if</span> (str.includes(<span class="hljs-string">&#x27;?&#x27;</span>)) &#123;<br>      <span class="hljs-keyword">return</span> str.split(<span class="hljs-string">&#x27;?&#x27;</span>)[<span class="hljs-number">0</span>];<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (str.includes(<span class="hljs-string">&#x27;#&#x27;</span>))&#123;<br>      <span class="hljs-keyword">return</span> str.split(<span class="hljs-string">&#x27;#&#x27;</span>)[<span class="hljs-number">0</span>];<br>    &#125;<br>    <span class="hljs-keyword">return</span> str;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>来看效果：</p><p><img src="https://img-blog.csdnimg.cn/20210528152745752.gif#pic_center"></p><p>想要的效果已经实现，通过页面名来匹配可能不是最好的解决方式，因为这样必须要求<strong>页面名是唯一的</strong>，如有更好的解决方案，欢迎私信~</p><p>其实这里还遇到一个问题：</p><p>权限管理必定会配合着路由懒加载，但是懒加载的组件是不需要在任何模块中 <code>declarations</code>数组中引入的，如果没有引入组件，那么指令就不会在子模块中的组件中生效，会报错。<br>所以，最后的解决方式就是在提供指令的模块中同时引入懒加载路由的组件。不用担心，懒加载依然有意义。</p><p><img src="https://img-blog.csdnimg.cn/20210528152800762.jpg#pic_center"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><em><strong>1. 在比较固定角色的情况下，采取“路由守卫 + 结构性指令”方案是不错的选择，相反的话第二种方式则更推荐；<br>2. 权限管理必定会配合着路由懒加载。</strong></em></p><p>权限管理的处理方式可能还有其他方案，如果你的更好，请告诉我~</p><hr><p><em><strong>欢迎关注我的公众号，公众号将第一时间更新angular教程：</strong></em><br><img src="https://img-blog.csdnimg.cn/img_convert/2ed94c3f0147a84d6e24a0625dacbb40.png#pic_center#pic_center"></p>]]></content>
    
    
    <categories>
      
      <category>angular</category>
      
    </categories>
    
    
    <tags>
      
      <tag>权限管理</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
